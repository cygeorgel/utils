#!/bin/bash

# Process Monitor - Security-focused process monitoring script
# Monitors running processes and raises alerts for suspicious activity
# Author: AI Assistant
# Version: 1.0

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/process_monitor.log"
CONFIG_FILE="${SCRIPT_DIR}/process_monitor.conf"
ALERT_FILE="${SCRIPT_DIR}/alerts.log"

# Default thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
SUSPICIOUS_PROCESSES=("nc" "netcat" "ncat" "socat" "wget" "curl" "python" "perl" "ruby" "php" "bash" "sh" "zsh" "powershell")
SUSPICIOUS_PORTS=(4444 4445 5555 6666 7777 8888 9999 12345 31337)
SUSPICIOUS_PATHS=("/tmp" "/dev/shm" "/var/tmp" "/tmp/.X11-unix")
MIN_PROCESS_AGE=5  # Minimum age in seconds for process to be considered suspicious

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Alert levels
ALERT_CRITICAL="CRITICAL"
ALERT_HIGH="HIGH"
ALERT_MEDIUM="MEDIUM"
ALERT_LOW="LOW"

# Initialize
declare -A PROCESS_HISTORY
declare -A ALERT_COUNTERS
WHITELIST_FILE="${SCRIPT_DIR}/whitelist.txt"

# Load configuration if exists
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        log "Configuration loaded from $CONFIG_FILE"
    else
        create_default_config
    fi
}

# Create default configuration file
create_default_config() {
    cat > "$CONFIG_FILE" << EOF
# Process Monitor Configuration
# CPU usage threshold (percentage)
CPU_THRESHOLD=80

# Memory usage threshold (percentage)
MEMORY_THRESHOLD=80

# Suspicious process names (space-separated)
SUSPICIOUS_PROCESSES=("nc" "netcat" "ncat" "socat" "wget" "curl" "python" "perl" "ruby" "php" "bash" "sh" "zsh" "powershell")

# Suspicious ports to monitor
SUSPICIOUS_PORTS=(4444 4445 5555 6666 7777 8888 9999 12345 31337)

# Suspicious paths to monitor
SUSPICIOUS_PATHS=("/tmp" "/dev/shm" "/var/tmp" "/tmp/.X11-unix")

# Minimum process age in seconds before flagging as suspicious
MIN_PROCESS_AGE=5

# Enable/disable specific checks
ENABLE_CPU_CHECK=true
ENABLE_MEMORY_CHECK=true
ENABLE_SUSPICIOUS_PROCESS_CHECK=true
ENABLE_NETWORK_CHECK=true
ENABLE_PATH_CHECK=true
ENABLE_CRON_CHECK=true

# Whitelist file (one process name per line)
WHITELIST_FILE="${SCRIPT_DIR}/whitelist.txt"

# Alert settings
ENABLE_CONSOLE_ALERTS=true
ENABLE_LOG_ALERTS=true
ENABLE_FILE_ALERTS=true
EOF
    log "Default configuration created at $CONFIG_FILE"
}

# Logging function
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$LOG_FILE"
}

# Alert function
alert() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Console alert
    if [[ "${ENABLE_CONSOLE_ALERTS:-true}" == "true" ]]; then
        case "$level" in
            "$ALERT_CRITICAL")
                echo -e "${RED}[$timestamp] [$level] $message${NC}"
                ;;
            "$ALERT_HIGH")
                echo -e "${YELLOW}[$timestamp] [$level] $message${NC}"
                ;;
            "$ALERT_MEDIUM")
                echo -e "${BLUE}[$timestamp] [$level] $message${NC}"
                ;;
            *)
                echo -e "${GREEN}[$timestamp] [$level] $message${NC}"
                ;;
        esac
    fi
    
    # Log alert
    if [[ "${ENABLE_LOG_ALERTS:-true}" == "true" ]]; then
        echo "[$timestamp] [$level] $message" >> "$ALERT_FILE"
    fi
    
    # File alert
    if [[ "${ENABLE_FILE_ALERTS:-true}" == "true" ]]; then
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
}

# Check if process is whitelisted
is_whitelisted() {
    local process_name="$1"
    local whitelist_file="${WHITELIST_FILE:-${SCRIPT_DIR}/whitelist.txt}"
    
    if [[ -f "$whitelist_file" ]]; then
        grep -q "^${process_name}$" "$whitelist_file" 2>/dev/null
    else
        return 1
    fi
}

# Check for high CPU usage
check_cpu_usage() {
    if [[ "${ENABLE_CPU_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking CPU usage..."
    
    # Get processes sorted by CPU usage
    ps -eo pid,ppid,cmd,%cpu,%mem,etime --sort=-%cpu | head -20 | while read -r pid ppid cmd cpu mem etime; do
        if [[ "$cpu" =~ ^[0-9]+\.?[0-9]*$ ]] && (( $(echo "$cpu > $CPU_THRESHOLD" | bc -l) )); then
            if ! is_whitelisted "$(basename "$cmd")"; then
                alert "$ALERT_HIGH" "High CPU usage: PID $pid ($cmd) using ${cpu}% CPU"
            fi
        fi
    done
}

# Check for high memory usage
check_memory_usage() {
    if [[ "${ENABLE_MEMORY_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking memory usage..."
    
    # Get processes sorted by memory usage
    ps -eo pid,ppid,cmd,%cpu,%mem,etime --sort=-%mem | head -20 | while read -r pid ppid cmd cpu mem etime; do
        if [[ "$mem" =~ ^[0-9]+\.?[0-9]*$ ]] && (( $(echo "$mem > $MEMORY_THRESHOLD" | bc -l) )); then
            if ! is_whitelisted "$(basename "$cmd")"; then
                alert "$ALERT_HIGH" "High memory usage: PID $pid ($cmd) using ${mem}% memory"
            fi
        fi
    done
}

# Check for suspicious processes
check_suspicious_processes() {
    if [[ "${ENABLE_SUSPICIOUS_PROCESS_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking for suspicious processes..."
    
    for suspicious_proc in "${SUSPICIOUS_PROCESSES[@]}"; do
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                local pid=$(echo "$line" | awk '{print $2}')
                local cmd=$(echo "$line" | awk '{print $1}')
                local etime=$(ps -o etime= -p "$pid" 2>/dev/null | tr -d ' ')
                
                if ! is_whitelisted "$suspicious_proc"; then
                    # Check if process is older than minimum age
                    if [[ -n "$etime" ]]; then
                        local age_seconds=$(echo "$etime" | awk -F: '{if(NF==3) print $1*3600+$2*60+$3; else if(NF==2) print $1*60+$2; else print $1}')
                        if (( age_seconds >= MIN_PROCESS_AGE )); then
                            alert "$ALERT_MEDIUM" "Suspicious process detected: $suspicious_proc (PID: $pid, Age: $etime)"
                        fi
                    fi
                fi
            fi
        done < <(pgrep -f "$suspicious_proc" | xargs -I {} ps -p {} -o comm=,pid= 2>/dev/null)
    done
}

# Check for suspicious network connections
check_network_connections() {
    if [[ "${ENABLE_NETWORK_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking network connections..."
    
    # Check for suspicious ports
    for port in "${SUSPICIOUS_PORTS[@]}"; do
        local connections=$(ss -tuln | grep ":$port " 2>/dev/null)
        if [[ -n "$connections" ]]; then
            alert "$ALERT_HIGH" "Suspicious port $port in use: $connections"
        fi
    done
    
    # Check for unusual network activity
    ss -tuln | grep -E ":(4444|4445|5555|6666|7777|8888|9999|12345|31337) " | while read -r line; do
        alert "$ALERT_HIGH" "Suspicious network connection: $line"
    done
}

# Check for processes running from suspicious paths
check_suspicious_paths() {
    if [[ "${ENABLE_PATH_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking for processes in suspicious paths..."
    
    for suspicious_path in "${SUSPICIOUS_PATHS[@]}"; do
        ps -eo pid,cmd | grep "$suspicious_path" | while read -r pid cmd; do
            if [[ -n "$pid" && "$pid" =~ ^[0-9]+$ ]]; then
                if ! is_whitelisted "$(basename "$cmd")"; then
                    alert "$ALERT_MEDIUM" "Process running from suspicious path: PID $pid ($cmd)"
                fi
            fi
        done
    done
}

# Check for unusual cron jobs
check_cron_jobs() {
    if [[ "${ENABLE_CRON_CHECK:-true}" != "true" ]]; then
        return
    fi
    
    log "Checking for unusual cron jobs..."
    
    # Check system crontab
    if [[ -f /etc/crontab ]]; then
        grep -v '^#' /etc/crontab | grep -v '^$' | while read -r line; do
            if [[ "$line" =~ (wget|curl|nc|netcat|python|perl|ruby|php|bash|sh) ]]; then
                alert "$ALERT_MEDIUM" "Suspicious cron job in /etc/crontab: $line"
            fi
        done
    fi
    
    # Check user crontabs
    for user in $(cut -f1 -d: /etc/passwd); do
        if crontab -u "$user" -l 2>/dev/null | grep -q -E "(wget|curl|nc|netcat|python|perl|ruby|php|bash|sh)"; then
            alert "$ALERT_MEDIUM" "Suspicious cron job for user $user"
        fi
    done
}

# Check for processes with unusual privileges
check_privileges() {
    log "Checking for processes with unusual privileges..."
    
    # Check for processes running as root
    ps -eo pid,user,cmd | awk '$2 == "root" && $3 !~ /^\[/ {print $0}' | while read -r pid user cmd; do
        if [[ -n "$pid" && "$pid" =~ ^[0-9]+$ ]]; then
            # Skip kernel threads and common system processes
            if [[ ! "$cmd" =~ ^(kthreadd|ksoftirqd|migration|rcu_|watchdog|systemd|init|kworker) ]]; then
                if ! is_whitelisted "$(basename "$cmd")"; then
                    alert "$ALERT_MEDIUM" "Process running as root: PID $pid ($cmd)"
                fi
            fi
        fi
    done
}

# Check for processes with unusual file descriptors
check_file_descriptors() {
    log "Checking for processes with unusual file descriptors..."
    
    # Find processes with many open files
    lsof 2>/dev/null | awk '{print $2}' | sort | uniq -c | sort -nr | head -10 | while read -r count pid; do
        if (( count > 100 )); then
            local cmd=$(ps -p "$pid" -o cmd= 2>/dev/null)
            if [[ -n "$cmd" ]]; then
                alert "$ALERT_LOW" "Process with many open files: PID $pid ($cmd) has $count open files"
            fi
        fi
    done
}

# Main monitoring function
monitor_processes() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    log "Starting process monitoring scan at $timestamp"
    
    echo -e "${BLUE}=== Process Security Monitor ===${NC}"
    echo -e "${BLUE}Scan started at: $timestamp${NC}"
    echo
    
    check_cpu_usage
    check_memory_usage
    check_suspicious_processes
    check_network_connections
    check_suspicious_paths
    check_cron_jobs
    check_privileges
    check_file_descriptors
    
    log "Process monitoring scan completed"
    echo -e "${GREEN}Scan completed at: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
}

# Show help
show_help() {
    cat << EOF
Process Monitor - Security-focused process monitoring script

USAGE:
    $0 [OPTIONS]

OPTIONS:
    -h, --help          Show this help message
    -c, --config FILE   Use custom configuration file
    -l, --log FILE      Use custom log file
    -a, --alert FILE    Use custom alert file
    -v, --verbose       Enable verbose output
    -q, --quiet         Suppress console output
    -w, --whitelist     Show current whitelist
    -s, --status        Show monitoring status
    --create-config     Create default configuration file
    --create-whitelist  Create default whitelist file

EXAMPLES:
    $0                  # Run with default settings
    $0 -v               # Run with verbose output
    $0 -c myconfig.conf # Use custom configuration
    $0 --create-config  # Create default config file

CONFIGURATION:
    Edit $CONFIG_FILE to customize monitoring behavior.
    Edit $WHITELIST_FILE to whitelist trusted processes.

EOF
}

# Create default whitelist
create_whitelist() {
    local whitelist_file="${WHITELIST_FILE:-${SCRIPT_DIR}/whitelist.txt}"
    
    cat > "$whitelist_file" << EOF
# Process Monitor Whitelist
# Add trusted process names here (one per line)
# These processes will not trigger alerts

# System processes
systemd
init
kthreadd
ksoftirqd
migration
rcu_
watchdog
kworker

# Common applications
firefox
chrome
chromium
thunderbird
vlc
gimp
libreoffice
code
cursor

# Development tools
git
docker
kubectl
terraform
ansible

# Add your trusted processes below this line
EOF
    log "Default whitelist created at $whitelist_file"
}

# Show whitelist
show_whitelist() {
    local whitelist_file="${WHITELIST_FILE:-${SCRIPT_DIR}/whitelist.txt}"
    
    if [[ -f "$whitelist_file" ]]; then
        echo "Current whitelist ($whitelist_file):"
        cat "$whitelist_file"
    else
        echo "No whitelist file found. Run with --create-whitelist to create one."
    fi
}

# Show status
show_status() {
    echo "Process Monitor Status:"
    echo "======================"
    echo "Configuration file: $CONFIG_FILE"
    echo "Log file: $LOG_FILE"
    echo "Alert file: $ALERT_FILE"
    echo "Whitelist file: ${WHITELIST_FILE:-${SCRIPT_DIR}/whitelist.txt}"
    echo
    
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "Configuration loaded: Yes"
    else
        echo "Configuration loaded: No (using defaults)"
    fi
    
    if [[ -f "${WHITELIST_FILE:-${SCRIPT_DIR}/whitelist.txt}" ]]; then
        echo "Whitelist loaded: Yes"
    else
        echo "Whitelist loaded: No"
    fi
    
    echo
    echo "Recent alerts:"
    if [[ -f "$ALERT_FILE" ]]; then
        tail -5 "$ALERT_FILE" 2>/dev/null || echo "No alerts found"
    else
        echo "No alert file found"
    fi
}

# Main script logic
main() {
    local verbose=false
    local quiet=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -c|--config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            -l|--log)
                LOG_FILE="$2"
                shift 2
                ;;
            -a|--alert)
                ALERT_FILE="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -q|--quiet)
                quiet=true
                shift
                ;;
            -w|--whitelist)
                show_whitelist
                exit 0
                ;;
            -s|--status)
                show_status
                exit 0
                ;;
            --create-config)
                create_default_config
                exit 0
                ;;
            --create-whitelist)
                create_whitelist
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Set quiet mode
    if [[ "$quiet" == "true" ]]; then
        ENABLE_CONSOLE_ALERTS=false
    fi
    
    # Load configuration
    load_config
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    mkdir -p "$(dirname "$ALERT_FILE")"
    
    # Run monitoring
    monitor_processes
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    for cmd in ps ss lsof bc; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "Error: Missing required dependencies: ${missing_deps[*]}"
        echo "Please install them using your package manager."
        exit 1
    fi
}

# Run main function
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    check_dependencies
    main "$@"
fi